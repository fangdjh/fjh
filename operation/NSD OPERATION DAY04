NSD OPERATION DAY04

案例1：构建memcached服务
案例2：LNMP+memcached
案例3：PHP的本地Session信息
案例4：PHP实现session共享
1 案例1：构建memcached服务
1.1 问题
本案例要求先快速搭建好一台memcached服务器，并对memcached进行简单的增、删、改、查操作：
安装memcached软件，并启动服务
使用telnet测试memcached服务
对memcached进行增、删、改、查等操作
1.2 方案
使用1台RHEL7虚拟机作为memcached服务器（192.168.4.5）。
在RHEL7系统光盘中包含有memcached，因此需要提前配置yum源，即可直接使用yum安装，客户端测试时需要提前安装telnet远程工具。
验证时需要客户端主机安装telnet，远程memcached来验证服务器的功能：
add name 0 180 10	//变量不存在则添加
set name 0 180 10	//添加或替换变量
replace name 0 180 10	//替换
get name	//读取变量
append name 0 180 10	//向变量中追加数据
delete name	//删除变量
stats	//查看状态
flush_all	//清空所有
提示：0表示不压缩，180为数据缓存时间，10为需要存储的数据字节数量。
1.3 步骤
实现此案例需要按照如下步骤进行。
步骤一：构建memcached服务
1）使用yum安装软件包memcached
[root@proxy ~]# yum -y  install   memcached
[root@proxy ~]# rpm -qa memcached
memcached-1.4.15-10.el7_3.1.x86_64
2）启动服务并查看网络连接状态验证是否开启成功：
[root@proxy ~]# systemctl  start  memcached
[root@proxy ~]# systemctl  status  memcached
[root@proxy ~]# netstat  -anptu  |  grep memcached
tcp    0    0 0.0.0.0:11211        0.0.0.0:*        LISTEN        2839/memcached      
tcp    0    0 :::11211            :::*                LISTEN        2839/memcached      
udp    0    0 0.0.0.0:11211        0.0.0.0:*                    2839/memcached      
udp    0    0 :::11211            :::*                            2839/memcached
[root@proxy ~]# setenforce 0
[root@proxy ~]# firewall-cmd --set-default-zone=trusted
步骤二：使用telnet访问memcached服务器
1）使用yum安装telnet
[root@proxy ~]# yum –y install telnet
2)使用telnet连接服务器测试memcached服务器功能，包括增、删、改、查等操作。
[root@proxy ~]# telnet  192.168.4.5  11211
Trying 192.168.4.5...
……
set name 0 180 3                //定义变量，变量名称为name
plj                            //输入变量的值，值为plj                
STORED
get name                        //获取变量的值
VALUE name 0 3                 //输出结果
plj
END
add myname 0 180 10            //新建，myname不存在则添加，存在则报错
set myname 0 180 10            //添加或替换变量
replace myname 0 180 10        //替换，如果myname不存在则报错
get myname                    //读取变量
append myname 0 180 10        //向变量中追加数据
delete myname                    //删除变量
stats                        //查看状态
flush_all                        //清空所有
quit                            //退出登录                                  
2 案例2：LNMP+memcached
2.1 问题
沿用练习一，部署LNMP+memcached网站平台,通过PHP页面实现对memcached服务器的数据操作，实现以下目标：
部署LNMP实现PHP动态网站架构
为PHP安装memcache扩展
创建PHP页面，并编写PHP代码，实现对memcached的数据操作
2.2 方案
使用2台RHEL7虚拟机，其中一台作为memcached及LNMP服务器（192.168.4.5）、另外一台作为测试用的Linux客户机（192.168.4.100），如图-1所示。
￼
图-1
在RHEL7系统光盘中包含有我们需要的MariaDB、PHP，我们需要使用源码安装Nginx，使用RPM包安装FPM。另外如果希望使用PHP来操作memcached，注意必须要为PHP安装memcache扩展（php-pecl-memcache），否则PHP无法解析连接memcached的指令。客户端测试时需要提前安装telnet远程工具。
2.3 步骤
实现此案例需要按照如下步骤进行。
步骤一：部署LNMP环境（如果环境中已经存在LNMP环境本步骤可以忽略）
1）使用yum安装基础依赖包
[root@proxy ~]# yum -y install gcc openssl-devel pcre-devel zlib-devel
.. ..
2）源码安装Nginx
[root@proxy ~]# tar -zxvf nginx-1.12.2.tar.gz
[root@proxy ~]# cd nginx-1.12.2
[root@proxy nginx-1.12.2]#  ./configure   \
> --with-http_ssl_module 
[root@proxy nginx-1.12.2]# make && make install
3）安装MariaDB数据库
[root@proxy ~]# yum –y install  mariadb  mariadb-server  mariadb-devel
4）安装PHP
[root@proxy ~]# yum –y install  php  php-mysql
[root@proxy ~]# yum –y localinstall  php-fpm-5.4.16-42.el7.x86_64.rpm
5）为PHP添加memcache扩展
[root@proxy ~]# yum –y install  php-pecl-memcache
6）修改Nginx配置文件
[root@proxy ~]# vim /usr/local/nginx/conf/nginx.conf
location / {
            root   html;
            index  index.php  index.html   index.htm;
        }
 location  ~  \.php$  {
            root           html;
            fastcgi_pass   127.0.0.1:9000;
            fastcgi_index  index.php;
           # fastcgi_param   SCRIPT_FILENAME  $document_root$fastcgi_script_name;
            include        fastcgi.conf;
        }
步骤二：启动服务
1）启动Nginx服务
这里需要注意的是，如果服务器上已经启动了其他监听80端口的服务软件（如httpd），则需要先关闭该服务，否则会出现冲突。
[root@proxy ~]# systemctl stop  httpd                //如果该服务存在，则关闭该服务
[root@proxy ~]# /usr/local/nginx/sbin/nginx
[root@proxy ~]# netstat -utnlp | grep :80
tcp    0    0 0.0.0.0:80        0.0.0.0:*        LISTEN        32428/nginx         
2）启动MySQL服务
[root@proxy ~]# systemctl start mariadb
[root@proxy ~]# systemctl status mariadb
3）启动PHP-FPM服务
[root@proxy ~]# systemctl start php-fpm
[root@proxy ~]# systemctl status php-fpm
4）关闭SELinux、防火墙
[root@proxy ~]# setenforce 0
[root@proxy ~]# firewall-cmd --set-default-zone=trusted
步骤三：创建PHP页面，使用PHP语言测试memcached服务
创建PHP首页文档/usr/local/nginx/html/index.php，测试页面可以参考lnmp_soft/php_scripts/mem.php：
 [root@proxy ~]# vim /usr/local/nginx/html/test.php
<?php
$memcache=new Memcache;                //创建memcache对象
$memcache->connect('localhost',11211) or die ('could not connect!!');
$memcache->set('key','test');             //定义变量
$get_values=$memcache->get('key');        //获取变量值
echo $get_values;
?>
步骤四：客户端测试
客户端使用浏览器访问服务器PHP首页文档，检验对memcached的操作是否成功：
[root@client ~]# firefox http://192.168.4.5/test.php
3 案例3：PHP的本地Session信息
3.1 问题
通过Nginx调度器负载后端两台Web服务器，实现以下目标：
部署Nginx为前台调度服务器
调度算法设置为轮询
后端为两台LNMP服务器
部署测试页面，查看PHP本地的Session信息
3.2 方案
使用4台RHEL7虚拟机，其中一台作为Nginx前端调度器服务器（eth0:192.168.4.5,eth1:172.16.2.5）、两台虚拟机部署为LNMP服务器，分别为Web1服务器（192.168.2.100）和Web2服务器（192.168.2.200），另外一台作为测试用的Linux客户机（172.16.4.100），拓扑如图-2所示。
￼
图-2
3.3 步骤
实现此案例需要按照如下步骤进行。
步骤一：部署前端Nginx调度服务器
1）使用源码安装nginx软件（如果Nginx软件包已存在可以忽略此步骤）
[root@proxy ~]# yum  -y  install   pcre-devel openssl-devel
[root@proxy ~]# tar -zxvf nginx-1.12.2.tar.gz
[root@proxy ~]# cd nginx-1.12.2
[root@proxy nginx-1.12.2]# ./configure
[root@proxy nginx-1.12.2]# make && make install
2）修改Nginx配置文件
Nginx配置文件中，通过upstream定义后端服务器地址池，默认调度策略为轮询，使用proxy_pass调用upstream定义的服务器地址池：
[root@proxy ~]# vim /usr/local/nginx/conf/nginx.conf
.. ..
upstream webs  {
        server 192.168.2.100:80;
        server 192.168.2.200:80;
  }
 server  {
          listen       80;
          server_name  localhost;
          location  /  {
              proxy_pass http://webs;
            root   html;
            index  index.html index.htm;
          }
}
3）启动Nginx服务
[root@proxy ~]# /usr/local/nginx/sbin/nginx
4）关闭SELinux、防火墙
[root@proxy ~]# setenforce 0
[root@proxy ~]# firewall-cmd --set-default-zone=trusted
步骤二：部署后端LNMP服务器相关软件
注意:以下部署LNMP服务器的操作，需要在两台后端服务器做相同的操作，下面我们以一台Web1服务器（192.168.2.100）为例，对Web2服务器执行相同操作即可。
1）使用yum安装基础依赖包
[root@web1 ~]# yum -y install gcc openssl-devel pcre-devel zlib-devel
.. ..
2）源码安装Nginx
[root@web1 ~]# tar -zxvf nginx-1.12.2.tar.gz
[root@web1 ~]# cd nginx-1.12.2
[root@web1 nginx-1.12.2]#  ./configure   \
> --with-http_ssl_module 
[root@web1 nginx-1.12.2]# make && make install
3）安装MariaDB数据库
[root@web1 ~]# yum –y install  mariadb  mariadb-server  mariadb-devel
4）安装PHP
[root@web1 ~]# yum –y install  php  php-mysql
[root@web1 ~]# yum –y localinstall  php-fpm-5.4.16-42.el7.x86_64.rpm
5）为PHP添加memcache扩展
[root@web1 ~]# yum –y install  php-pecl-memcache
6）修改Nginx配置文件
[root@web1 ~]# vim /usr/local/nginx/conf/nginx.conf
location / {
            root   html;
            index  index.php  index.html   index.htm;
        }
 location  ~  \.php$  {
            root           html;
            fastcgi_pass   127.0.0.1:9000;
            fastcgi_index  index.php;
           # fastcgi_param   SCRIPT_FILENAME  $document_root$fastcgi_script_name;
            include        fastcgi.conf;
        }
步骤三：启动LNMP服务器相关的服务
注意:以下LNMP服务器的操作，需要在两台后端服务器做相同的操作，下面我们以一台Web1服务器（192.168.2.100）为例，对Web2服务器执行相同操作即可。
1）启动Nginx服务
这里需要注意的是，如果服务器上已经启动了其他监听80端口的服务软件（如httpd），则需要先关闭该服务，否则会出现冲突。
[root@web1 ~]# systemctl stop  httpd                //如果该服务存在，则关闭该服务
[root@web1 ~]# /usr/local/nginx/sbin/nginx
[root@web1 ~]# netstat -utnlp | grep :80
tcp    0    0 0.0.0.0:80        0.0.0.0:*        LISTEN        32428/nginx         
2）启动MySQL服务
[root@web1 ~]# systemctl start mariadb
[root@web1 ~]# systemctl status mariadb
3）启动PHP-FPM服务
[root@web1 ~]# systemctl start php-fpm
[root@web1 ~]# systemctl status php-fpm
4）关闭SELinux、防火墙
[root@web1 ~]# setenforce 0
[root@web1 ~]# firewall-cmd --set-default-zone=trusted
步骤四：测试LNMP服务器是否配置成功
注意:以下LNMP服务器的操作，需要在两台后端服务器做相同的操作，下面我们以一台Web1服务器（192.168.2.100）为例，对Web2服务器执行相同操作即可。
1）手动生成测试页面（测试页面可以参考lnmp_soft/php_scripts/mem.php）
创建PHP首页文档/usr/local/nginx/html/index.php：
 [root@web1 ~]# vim /usr/local/nginx/html/mem.php
<?php
$memcache=new Memcache;                //创建memcache对象
$memcache->connect('localhost',11211) or die ('could not connect!!');
$memcache->set('key','test');             //定义变量
$get_values=$memcache->get('key');        //获取变量值
echo $get_values;
?>    
2）浏览器访问测试页面验证（这里是以web1为例，web适当调整IP地址，做相同操作即可）。
[root@web1 ~]# curl  http://192.168.2.100        //查看是否有数据信息
步骤五：部署测试页面
1）部署测试页面(先测试Web1服务器）。
测试页面可以参考lnmp_soft/php_scripts/php-memcached-demo.tar.gz。
[root@web1 ~]# cd lnmp_soft/php_scripts/
[root@web1 php_scripts]# tar –xf php-memcached-demo.tar.gz
[root@web1 php_scripts]# cd php-memcached-demo
[root@web1 php-memcached-demo]# cp –a  *  /usr/local/nginx/html/
2）浏览器直接访问后端服务器的测试页面（先测试Web1服务器）。
[root@web1 ~]# firefox http://192.168.2.100            //填写账户信息
[root@web1 ~]# cd /var/lib/php/session/            //查看服务器本地的Session信息
[root@web1 ~]# ls
sess_ahilcq9bguot0vqsjtd84k7244                        //注意这里的ID是随机的
[root@web1 ~]# cat sess_ahilcq9bguot0vqsjtd84k7244
3）部署测试页面(再测试Web2服务器）。
测试页面可以参考lnmp_soft/php_scripts/php-memcached-demo.tar.gz。
[root@web2 ~]# cd lnmp_soft/php_scripts/
[root@web2 php_scripts]# tar –xf php-memcached-demo.tar.gz
[root@web2 php_scripts]# cd php-memcached-demo
[root@web2 php-memcached-demo]# cp –a  *  /usr/local/nginx/html/
4）浏览器直接访问后端服务器的测试页面（先测试Web2服务器）。
[root@web2 ~]# firefox http://192.168.2.100        //填写账户信息
[root@web2 ~]# cd /var/lib/php/session/            //查看服务器本地的Session信息
[root@web2 ~]# ls
sess_qqek1tmel07br8f63d6v9ch401                        //注意这里的ID是随机的
[root@web2 ~]# cat sess_qqek1tmel07br8f63d6v9ch401        
5）浏览器访问前端调度器测试（不同后端服务器Session不一致）。
[root@client ~]# firefox http://192.168.4.5
//填写注册信息后，刷新，还需要再次注册，说明两台计算机使用的是本地Session
//第二台主机并不知道你再第一台主机已经登录，第一台主机的登录信息也没有传递给第二台主机
4 案例4：PHP实现session共享
4.1 问题
沿用练习三，通过修改PHP-FPM配置文件，实现session会话共享，本案例需要在练习三的基础上实现：
配置PHP使用memcached服务器共享Session信息
客户端访问两台不同的后端Web服务器时，Session 信息一致
4.2 方案
在练习三拓扑的基础上，Nginx服务器除了承担调度器外，还需要担任memcached数据库的角色，并在两台后端LNMP服务器上实现PHP的session会话共享。拓扑结构如图-4所示。
￼
图-4
4.3 步骤
实现此案例需要按照如下步骤进行。
步骤一：构建memcached服务
1）安装Memcached服务（如果192.168.4.5上已经有本软件包，此步骤可以忽略）
[root@proxy ~]# yum –y install memcached
2）启动服务并查看网络连接状态验证是否开启成功：
[root@proxy ~]# systemctl restart memcached
[root@proxy ~]# netstat  -anptu  |  grep memcached
tcp    0    0 0.0.0.0:11211        0.0.0.0:*        LISTEN        2839/memcached      
tcp    0    0 :::11211            :::*                LISTEN        2839/memcached      
udp    0    0 0.0.0.0:11211        0.0.0.0:*                    2839/memcached      
udp    0    0 :::11211            :::*                            2839/memcached
3）关闭SELinux、防火墙
[root@proxy ~]# setenforce 0
[root@proxy ~]# firewall-cmd --set-default-zone=trusted
步骤二：在后端LNMP服务器上部署Session共享
注意：这些操作在两台后端Web服务器上均需要执行，以下操作以Web1（192.168.2.100）服务器为例。
1）修改PHP-FPM配置文件，并重启服务
[root@web1 ~]# vim  /etc/php-fpm.d/www.conf            //修改该配置文件的两个参数
修改前效果如下:
php_value[session.save_handler] = files
php_value[session.save_path] = /var/lib/php/session
//原始文件，默认定义Sessoin会话信息本地计算机（默认在/var/lib/php/session）
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
修改后效果如下:
php_value[session.save_handler] = memcache
php_value[session.save_path] = "tcp://192.168.2.5:11211"
//定义Session信息存储在公共的memcached服务器上，主机参数中为memcache（没有d）
//通过path参数定义公共的memcached服务器在哪（服务器的IP和端口）
[root@web1 ~]# systemctl  restart  php-fpm
步骤三：客户端测试
客户端使用浏览器访问两台不同的Web服务器。
操作步骤与练习三一致，最终可以获得相关的Session ID信息。
